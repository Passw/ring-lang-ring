<class>
name: HTTPLib_Response
para: void
codename: Response
</class>

bool has_header(const char *key)

std::string get_header_value(const char *key)
std::string get_header_value@2(const char *key, size_t id)

size_t get_header_value_count(const char *key)

void set_header(const char *key, const char *val)

void set_redirect(const char *url);
void set_redirect@2(const char *url, int status)

void set_content(const char *s, const char *content_type)
void set_content@2(const char *s, size_t n, const char *content_type)

<register>
void set_status(int status)
int get_status(void)
</register>

<code>
RING_FUNC(ring_HTTPLib_Response_set_status)
{
	Response *pObject;
	if (RING_API_PARACOUNT != 2)
	{
		RING_API_ERROR(RING_API_MISS2PARA);
		return;
	}
	RING_API_IGNORECPOINTERTYPE;
	if (!RING_API_ISCPOINTER(1))
	{
		RING_API_ERROR(RING_API_BADPARATYPE);
		return;
	}
	pObject = (Response *)RING_API_GETCPOINTER(1, "HTTPLib_Response");
	if (!RING_API_ISNUMBER(2))
	{
		RING_API_ERROR(RING_API_BADPARATYPE);
		return;
	}
	pObject->status = (int)RING_API_GETNUMBER(2);
}

RING_FUNC(ring_HTTPLib_Response_get_status)
{
	Response *pObject;
	if (RING_API_PARACOUNT != 1)
	{
		RING_API_ERROR(RING_API_MISS1PARA);
		return;
	}
	if (!RING_API_ISCPOINTER(1))
	{
		RING_API_ERROR(RING_API_BADPARATYPE);
		return;
	}
	pObject = (Response *)RING_API_GETCPOINTER(1, "HTTPLib_Response");
	RING_API_RETNUMBER(pObject->status);
}
</code>